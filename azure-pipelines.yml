trigger: none

pr:
  branches:
    include:
      - main

pool:
  name: Self-Hosted   # Your aget pool name

stages:
  - stage: CaptureRollbackScripts
    displayName: 'Capture Rollback Scripts and Insert into Mapper Table'
    jobs:
    - job: InsertRollbackScripts
      steps:
        - task: PowerShell@2
          displayName: 'Insert rollback script names into DB'
          inputs:
            targetType: 'inline'
            script: |
              $collectionUri = "$(System.CollectionUri)"
              $project = "$(System.TeamProject)"
              $repoId = "$(Build.Repository.ID)"
              $prId = "$(System.PullRequest.PullRequestId)"
              $buildId = "$(Build.BuildId)"
              $token = "$(System.AccessToken)"
              $repoUrl = 'https://github.com/ktsreddy007/DB_Migrotron'
              $repoFolder = 'rollback_sql'
              if (-not $prId) {
                Write-Error "No PR ID detected. Exiting."
                exit 1
              }
              $headers = @{ Authorization = "Bearer $token" }
              $iterationsUri = "$collectionUri$project/_apis/git/repositories/$repoId/pullRequests/$prId/iterations?api-version=7.0"
              $iterations = Invoke-RestMethod -Uri $iterationsUri -Headers $headers -Method Get
              $latestIteration = ($iterations.value | Sort-Object -Property id -Descending)[0].id
              $changesUri = "$collectionUri$project/_apis/git/repositories/$repoId/pullRequests/$prId/iterations/$latestIteration/changes?api-version=7.0"
              $changes = Invoke-RestMethod -Uri $changesUri -Headers $headers -Method Get
              $rollbackScripts = @()
              foreach ($change in $changes.value) {
                $filePath = $change.item.path
                if ($filePath -like "*/rollback_sql/*.sql") {
                  $filename = [System.IO.Path]::GetFileName($filePath)
                  $rollbackScripts += $filename
                  Write-Host "Detected rollback script: $filename"
                }
              }
              if ($rollbackScripts.Count -eq 0) {
                Write-Host "No rollback scripts detected. Exiting."
                exit 0
              }
              $connectionString = "Server=localhost;Database=Payroll;User Id=$(dbUser);Password=$(dbPassword);"
              $connection = New-Object System.Data.SqlClient.SqlConnection
              $connection.ConnectionString = $connectionString
              $connection.Open()
              foreach ($script in $rollbackScripts) {
                $query = "INSERT INTO migration_rollback_mapper (rollback_script_name, rollback_script_repo_folder, rollback_script_repo_url, build_id, pr_id) VALUES ('$script', '$repoFolder', '$repoUrl', '$buildId', '$prId')"
                $command = $connection.CreateCommand()
                $command.CommandText = $query
                $command.ExecuteNonQuery()
                Write-Host "Inserted into DB: $script"
              }
              $connection.Close()
          env:
            System.AccessToken: $(System.AccessToken)
            dbUser: $(dbUser)
            dbPassword: $(dbPassword)
    