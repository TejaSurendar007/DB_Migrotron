trigger: none
#  branches:
#    include:
#      - main

pr:
  branches:
    include:
     - main
  paths:
    include:
      - Database/MSSQL_Server/Dev/conf/rollback_input.csv
      
pool:
  name: Self-Hosted

variables:
  DB_SERVER: 'localhost'
  DB_NAME: 'Payroll'  

stages:
- stage: DetectFallbackScripts
  displayName: 'Detect Fallback Rollback Scripts in CSV'
  jobs:
  - job: DetectFallback
    displayName: 'Detect Fallbacks from CSV'
    steps:
    - task: PowerShell@2
      name: DetectFallbackPresence
      inputs:
        targetType: 'inline'
        script: |
          $CsvPath = "$(Build.SourcesDirectory)/Database/MSSQL_Server/Dev/conf/rollback_input.csv"
          if (-not (Test-Path $CsvPath)) {
            Write-Error "CSV file not found: $CsvPath"
            exit 1
          }

          $csv = Import-Csv -Path $CsvPath
          Write-Host "Imported $($csv.Count) rows from CSV."
          $hasFallback = $false

          foreach ($row in $csv) {
            Write-Host "Checking row with PR_ID: $($row.PR_ID), FallbackRollbackScript: $($row.FallbackRollbackScript)"
            if ($row.FallbackRollbackScript -and $row.FallbackRollbackScript.Trim() -ne "") {
              Write-Host "Found fallback rollback script in this row."
              $hasFallback = $true
              break
            }
          }

          if ($hasFallback) {
            Write-Host "Fallback rollback scripts detected in CSV."
            Write-Host "##vso[task.setvariable variable=FallbackRollbackScriptPresent;isOutput=true]true"
          } else {
            Write-Host "No fallback rollback scripts found in CSV."
            Write-Host "##vso[task.setvariable variable=FallbackRollbackScriptPresent;isOutput=true]false"
          }

- stage: UpdateMapperTable
  displayName: 'Update Mapper Table with Ad-hoc Rollbacks (Conditional)'
  dependsOn: DetectFallbackScripts
  condition: eq(dependencies.DetectFallbackScripts.outputs['DetectFallback.DetectFallbackPresence.FallbackRollbackScriptPresent'], 'true') 
  jobs:
  - job: UpdateMapper
    pool:
      name: Self-Hosted
    steps:
    - task: PowerShell@2
      name: UpdateMapperTable
      displayName: 'Insert Ad-hoc Rollback Mappings'
      inputs:
        targetType: 'inline'
        script: |
          $CsvPath = "$(Build.SourcesDirectory)/Database/MSSQL_Server/Dev/conf/rollback_input.csv"
          if (-not (Test-Path $CsvPath)) {
            Write-Error "CSV file not found: $CsvPath"
            exit 1
          }
          $requests = Import-Csv -Path $CsvPath
          if ($requests.Count -eq 0) {
            Write-Error "No rows found in CSV"
            exit 1
          }

          [System.Reflection.Assembly]::LoadWithPartialName("System.Data.SqlClient") | Out-Null
          $conn = New-Object System.Data.SqlClient.SqlConnection
          $conn.ConnectionString = "Server=$(DB_SERVER);Database=$(DB_NAME);User Id=$env:dbUser;Password=$env:dbPassword;"
          $conn.Open()

          foreach ($item in $requests) {
            $prId = $item.PR_ID
            $version = $item.MigrationVersion
            $fallbackScript = if ($null -ne $item.FallbackRollbackScript -and $item.FallbackRollbackScript.Trim() -ne "") { $item.FallbackRollbackScript.Trim() } else { $null }

            if ($fallbackScript) {
              $rollbackScriptPath = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath $fallbackScript
              if (Test-Path $rollbackScriptPath) {
                $cmd = $conn.CreateCommand()
                $cmd.CommandText = "SELECT COUNT(*) FROM Payroll.dbo.migration_rollback_mapper WHERE pr_id = @prId AND migration_version = @version"
                $cmd.Parameters.AddWithValue("@prId", $prId) | Out-Null
                $cmd.Parameters.AddWithValue("@version", $version) | Out-Null
                $exists = $cmd.ExecuteScalar()

                if ($exists -eq 0) {
                  $insertCmd = $conn.CreateCommand()
                  $insertCmd.CommandText = "INSERT INTO Payroll.dbo.migration_rollback_mapper (pr_id, migration_version, rollback_script_name, migration_script) VALUES (@prId, @version, @rollbackScript, 'ad-hoc')"
                  $insertCmd.Parameters.AddWithValue("@prId", $prId) | Out-Null
                  $insertCmd.Parameters.AddWithValue("@version", $version) | Out-Null
                  $insertCmd.Parameters.AddWithValue("@rollbackScript", $fallbackScript) | Out-Null
                  $insertCmd.ExecuteNonQuery()
                  Write-Host "Inserted new rollback mapping for PR $prId, version $version with fallback rollback script: $fallbackScript"
                }
              }
              else {
                Write-Warning "Fallback rollback script file NOT found in repo: $fallbackScript. Skipping insert."
              }
            }
          }
          $conn.Close()
      env:
        dbUser: $(dbUser_1)
        dbPassword: $(dbPassword)

- stage: FetchRollbackScripts
  displayName: 'Fetch Rollback Scripts and Publish Artifact'
  dependsOn: UpdateMapperTable
  condition: succeeded()
  jobs:
  - job: FetchScripts
    pool:
      name: Self-Hosted
    steps:
    - task: PowerShell@2
      name: FetchRollbackScripts
      displayName: 'Fetch rollback scripts based on mapper table'
      inputs:
        targetType: 'inline'
        script: |
          $CsvPath = "$(Build.SourcesDirectory)/Database/MSSQL_Server/Dev/conf/rollback_input.csv"
          if (-not (Test-Path $CsvPath)) {
            Write-Error "CSV file not found: $CsvPath"
            exit 1
          }
          $requests = Import-Csv -Path $CsvPath
          if ($requests.Count -eq 0) {
            Write-Error "No rows found in CSV"
            exit 1
          }

          [System.Reflection.Assembly]::LoadWithPartialName("System.Data.SqlClient") | Out-Null
          $conn = New-Object System.Data.SqlClient.SqlConnection
          $conn.ConnectionString = "Server=$(DB_SERVER);Database=$(DB_NAME);User Id=$env:dbUser;Password=$env:dbPassword;"
          $conn.Open()

          $grouped = $requests | Group-Object PR_ID
          foreach ($group in $grouped) {
            $prId = $group.Name
            $rollbackScripts = @()
            foreach ($item in $group.Group) {
              $version = $item.MigrationVersion
              Write-Host "Fetching rollback for PR: $prId, Version: $version"
              $cmd = $conn.CreateCommand()
              $cmd.CommandText = "SELECT rollback_script_name, migration_script FROM Payroll.dbo.migration_rollback_mapper WHERE pr_id = @prId AND migration_version = @version ORDER BY rollback_script_name DESC"
              $cmd.Parameters.Clear()
              $cmd.Parameters.AddWithValue("@prId", $prId) | Out-Null
              $cmd.Parameters.AddWithValue("@version", $version) | Out-Null
              $reader = $cmd.ExecuteReader()
              while ($reader.Read()) {
                $rollbackScripts += [PSCustomObject]@{
                  RollbackFile = $reader["rollback_script_name"]
                  MigrationFile = $reader["migration_script"]
                }
              }
              $reader.Close()
            }
            if ($rollbackScripts.Count -eq 0) {
              Write-Warning "No rollback scripts found for PR: $prId"
              continue
            }
            $timestamp = Get-Date -Format "yyyyMMddHHmmss"
            $jsonFileName = "PR${prId}_MIRO_Mapperdata_$timestamp.json"
            $jsonPath = Join-Path -Path "$(Build.ArtifactStagingDirectory)" -ChildPath $jsonFileName
            $rollbackScripts | ConvertTo-Json -Depth 3 | Out-File -FilePath $jsonPath -Encoding utf8
            Write-Host "Created JSON for PR: $prId -> $jsonFileName"
          }

          $conn.Close()
      env:
        dbUser: $(dbUser_1)
        dbPassword: $(dbPassword)

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: RollbackScriptsArtifact