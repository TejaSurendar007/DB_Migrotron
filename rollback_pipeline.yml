trigger: none
#  branches:
#    include:
#      - main

pr:
  branches:
    include:
     - main
  paths:
    include:
      - Database/MSSQL_Server/Dev/conf/rollback_input.csv
      
pool:
  name: Self-Hosted

variables:
  DB_SERVER: 'localhost'
  DB_NAME: 'Payroll'  

stages:
- stage: FetchRollbackScripts
  displayName: 'Fetch Rollback Scripts'
  jobs:
    - job: GetScripts
      steps:
        - task: PowerShell@2
          name: RB_Script_Capturer
          displayName: 'Process CSV Input and Fetch Rollbacks'
          inputs:
            targetType: 'inline'
            script: |
              $CsvPath = "$(Build.SourcesDirectory)/Database/MSSQL_Server/Dev/conf/rollback_input.csv"
              if (-not (Test-Path $CsvPath)) {
                Write-Error "CSV file not found: $CsvPath"
                exit 1
              }

              $requests = Import-Csv -Path $CsvPath
              if ($requests.Count -eq 0) {
                Write-Error "No rows found in CSV"
                exit 1
              }

              [System.Reflection.Assembly]::LoadWithPartialName("System.Data.SqlClient") | Out-Null
              $conn = New-Object System.Data.SqlClient.SqlConnection
              $conn.ConnectionString = "Server=$(DB_SERVER);Database=$(DB_NAME);User Id=$env:dbUser;Password=$env:dbPassword;"
              $conn.Open()

              $grouped = $requests | Group-Object PR_ID

              foreach ($group in $grouped) {
                $prId = $group.Name
                $rollbackScripts = @()

                foreach ($item in $group.Group) {
                  $version = $item.MigrationVersion
                  Write-Host "Fetching rollback for PR: $prId, Version: $version"
                  $cmd = $conn.CreateCommand()
                  $cmd.CommandText = "SELECT rollback_script_name, migration_script FROM Payroll.dbo.migration_rollback_mapper WHERE pr_id = @prId AND migration_version = @version ORDER BY rollback_script_name DESC"
                  $cmd.Parameters.AddWithValue("@prId", $prId) | Out-Null
                  $cmd.Parameters.AddWithValue("@version", $version) | Out-Null
                  $reader = $cmd.ExecuteReader()
                  while ($reader.Read()) {
                    $rollbackScripts += [PSCustomObject]@{
                      RollbackFile = $reader["rollback_script_name"]
                      MigrationFile = $reader["migration_script"]
                    }
                  }
                  $reader.Close()
                }

                if ($rollbackScripts.Count -eq 0) {
                  Write-Warning "No rollback scripts found for PR: $prId"
                  continue
                }

                $timestamp = Get-Date -Format "yyyyMMddHHmmss"
                $jsonFileName = "PR${prId}_MIRO_Mapperdata_$timestamp.json"
                $jsonPath = Join-Path -Path "$(Build.ArtifactStagingDirectory)" -ChildPath $jsonFileName

                $rollbackScripts | ConvertTo-Json -Depth 3 | Out-File -FilePath $jsonPath -Encoding utf8
                Write-Host "Created JSON for PR: $prId -> $jsonFileName"
              }

              $conn.Close()

          env:
            dbUser: $(dbUser_1)
            dbPassword: $(dbPassword)

        - publish: $(Build.ArtifactStagingDirectory)
          artifact: RollbackScriptsArtifact